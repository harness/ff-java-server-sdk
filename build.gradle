import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import com.vanniktech.maven.publish.SonatypeHost
import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

buildscript {
    repositories {
        maven { url "https://repo1.maven.org/maven2" }
        gradlePluginPortal()
    }
}

plugins {
    id 'java'
    id 'jvm-test-suite'
    id "signing"
    id "org.openapi.generator" version libs.versions.openapi.generator
    id "com.diffplug.spotless" version libs.versions.spotless
    id "com.github.evestera.depsize" version libs.versions.depsize
    id 'jacoco-report-aggregation'
    id "com.github.spotbugs" version libs.versions.spotbugs
    id "org.owasp.dependencycheck" version libs.versions.depcheck
    id "com.vanniktech.maven.publish" version libs.versions.maven.publish
}


apply plugin: 'org.openapi.generator'

allprojects {
    repositories {
        mavenLocal()
        maven {
            url = uri('https://repo.maven.apache.org/maven2/')
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
    }

    apply plugin: 'java-library'
    apply plugin: 'org.owasp.dependencycheck'
}

dependencies {
    api libs.okhttp3.core
    api libs.okhttp3.logging.interceptor
    api libs.gson.fire
    api libs.google.gson
    api libs.google.findbugs
    api libs.caffeine.cache
    api libs.murmur3
    api libs.swagger.annotations
    api libs.javax.annotation.api
    api libs.slf4j.api

    compileOnly libs.lombok
    annotationProcessor libs.lombok
}

group = 'io.harness'
version = libs.versions.sdk.get()
description = 'Harness Feature Flag Java Server SDK'

openApiGenerate {
    // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
    generatorName = "java"
    inputSpec = "$rootDir/src/main/resources/client-v1.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    templateDir = "$rootDir/template"
    apiPackage = "io.harness.cf.api"
    invokerPackage = "io.harness.cf"
    modelPackage = "io.harness.cf.model"
    generateApiDocumentation = false
    generateModelDocumentation = false
    generateModelTests = false
    generateApiTests = false
    typeMappings = [ "OffsetDateTime" : "Date" ]
    importMappings = [ "java.time.OffsetDateTime" : "java.util.Date" ]
    // https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/java.md
    configOptions  = [
            java8: "true",
            dateLibrary : "java8",
            serializableModel : "true",
            //additionalModelTypeAnnotations : "@FieldDefaults(makeFinal=true)"
    ]
}

tasks.register('generateVersion', Copy) {
    def tokens = [version: project.version]
    inputs.properties tokens
    from "src/template/java"
    into "$buildDir/generated-version/src/main/java"
    expand tokens
}

testing {
    suites {
        test {
            useJUnitJupiter()

            dependencies {
                implementation project()
                implementation libs.logback.classic
                implementation platform(libs.junit.bom)
                runtimeOnly libs.junit.platform.launcher
                implementation libs.mockito.junit5
                implementation libs.okhttp3.mockwebserver
                compileOnly libs.lombok
                annotationProcessor libs.lombok

                // JMH dependencies
                implementation libs.jmh.core
                annotationProcessor libs.jmh.annotations
            }

            targets {
                all {
                    testTask.configure {
                        testLogging {
                            events "passed", "skipped", "failed"
                            showStackTraces = true
                            exceptionFormat = TestExceptionFormat.FULL
                            debug {
                                events "started","passed", "skipped", "failed", "standard_out", "standard_error"
                                showStandardStreams = true
                                showStackTraces = true
                                exceptionFormat = TestExceptionFormat.FULL
                            }
                            info = debug
                        }
                    }
                }
            }

            sources {
                java {
                    srcDirs += [ "$buildDir/generated/src/main/java", "$buildDir/generated-version/src/main/java"]
                }
            }
        }
    }
}

mavenPublishing {

    // To publish, make sure the following env vars are set
    //
    // ORG_GRADLE_PROJECT_mavenCentralUsername
    // ORG_GRADLE_PROJECT_mavenCentralPassword
    //
    // To sign, make sure the following properties are set
    //
    // signing.secretKeyRingFile=(keyring location - e.g. output of `gpg --no-default-keyring --keyring secring.gpg --export-secret-keys <LONGID> >/tmp/keyring.gpg`)
    // signing.password=(****)
    // signing.keyId=(8 digit keyid)
    //
    // Also make sure that corresponding public key has been published to hkp://keys.openpgp.org, hkp://pgp.mit.edu, etc.

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

    pom {
       description = project.description
       name = project.name
       url = "https://github.com/harness/ff-java-server-sdk"

       licenses {
           license {
               name = "Apache License, Version 2.0"
               url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
               distribution = "repo"
           }
       }

       scm {
           developerConnection = "scm:git:ssh://https://github.com/harness/ff-java-server-sdk.git"
           connection = "scm:git:ssh://https://github.com/harness/ff-java-server-sdk.git"
           url = "https://github.com/drone/ff-java-server-sdk"
       }

       developers {
           developer {
               id = "andybharness"
               name = "Andrew Bell"
               email = "andrew.bell@harness.io"
               organization = "Harness Inc"
               organizationUrl = "https://www.harness.io/"
           }
           developer {
               id = "davejohnston"
               name = "Dave Johnston"
               email = "dave.johnston@harness.io"
               organization = "Harness Inc"
               organizationUrl = "https://www.harness.io/"
           }
           developer {
               id = "enver-bisevac"
               name = "Enver Bisevac"
               email = "enver.bisevac@harness.io"
               organization = "Harness Inc"
               organizationUrl = "https://www.harness.io/"
           }
           developer {
               id = "rushabh-harness"
               name = "Rushabh Shah"
               email = "rushabh@harness.io"
               organization = "Harness Inc"
               organizationUrl = "https://www.harness.io/"
           }
           developer {
               id = "hannah-tang"
               name = "Hannah Tang"
               email = "hannah.tang@harness.io"
               organization = "Harness Inc"
               organizationUrl = "https://www.harness.io/"
           }
           developer {
               id = "subiradhikari"
               name = "Subir Adhikari"
               email = "subir.adhikari@harness.io"
               organization = "Harness Inc"
               organizationUrl = "https://www.harness.io/"
           }
       }

    }
}

spotless {
    java {
        targetExclude(fileTree("$buildDir/generated"), fileTree("$buildDir/generated-version") { include("**/*.java") })
        removeUnusedImports()
        googleJavaFormat().formatJavadoc(false)
    }
}

dependencyCheck {
    formats = [ "HTML", "JSON" ]
    nvd {
        apiKey = System.getenv("FF_NVD_API_KEY")
        validForHours = 144
    }
}

compileJava.dependsOn tasks.openApiGenerate
compileJava.dependsOn generateVersion
compileJava.dependsOn spotlessApply
jacocoTestReport.dependsOn test
spotbugsTest.enabled = false
spotbugsMain.enabled = false

sourceSets.main.java.srcDirs += [ "$buildDir/generated/src/main/java", "$buildDir/generated-version/src/main/java" ]

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.named("sourcesJar") {
    dependsOn(tasks.named("generateVersion"))
}

wrapper {
    gradleVersion = '8.14.2'
    distributionType = Wrapper.DistributionType.ALL
}

tasks.named("generatePomFileForMavenPublication").configure {
    def publication = publishing.publications.maven
    destination = rootProject.file("${publication.artifactId}-${publication.version}.pom")
}
